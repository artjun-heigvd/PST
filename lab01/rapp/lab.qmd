---
title: "Rapport"
author:
  - name: Arthur Junod
    affiliations:
      - name: Département TIC
highlight-style: github
format:
  html:
    theme: cosmo
    monobackgroundcolor: rgb(255,250,240)
    toc: true
    toc-location: left
    #reference-location: margin
    reference-location: document
    code-line-numbers: true
date-format: '[This version:] MMMM D, YYYY'
number-sections: false
editor: 
  visual
---

```{r knitr_init}
#| echo: false
#| cache: false
#| message: false
#| warning: false
## Global options
library(knitr)
opts_chunk$set(echo=TRUE,
               cache=TRUE,
               comment=NA,
               message=FALSE,
               warning=FALSE,
               eval=TRUE)
```

# Intro

L'analyse des données, que nous allons utiliser durant ce travail pratique, permet de faire ressortir ou voir certaines caractéristiques en observant les données que nous avons. Nous allons les mettre en forme avec différent types de graphiques et également utiliser certaines fonctions que ***R*** nous mets à disposition afin de mieux comprendre ces données.

# Ex1

### b)

*Charger les données dans R en utilisant les fonctions `scan()` et `read.table()`.*

```{r}
cpus <- scan("../datas/cpus.txt")
examen <- read.table("../datas/examen.txt", header = TRUE)
```

### c)

*Pour voir le contenu de l'objet `cpus`, taper l'instruction*

```{r}
cpus
examen
```

### d)

*Pour accéder à la 12ème composante du vecteur `cpus`, utiliser la commande*

```{r}
cpus[12]
```

### e)

*Pour obtenir une partie du vecteur `cpus` comme par exemple les éléments du vecteur compris entre la 3ème et la 19ème composante, taper l'instruction*

```{r}
cpus[3:19]
```

### f)

*Pour extraire du vecteur `cpus` ses éléments supérieurs à* $190$, utiliser la commande

```{r}
cpus[cpus>190]
```

### g)

*Il est possible d'accéder directement aux composantes d'une table par le nom. Par exemple, si on veut afficher la composante `note` de l'objet `examen`, on peut utiliser la commande*

```{r}
examen$note
```

### h)

*On peut aussi accéder en profondeur aux composantes comme par exemple par la commande*

```{r}
examen$note[7]
```

### i)

*La méthode la plus simple pour créer un vecteur consiste à énumérer ses éléments à l'aide de la fonction `c()` :*

```{r}
mesdonnees<-c(2.9, 3.4, 3.4, 3.7, 3.7, 2.8, 2.1, 2.5, 2.6)
mesdonnees
couleurs<-c("bleu", "vert", "blanc", "noir", "jaune")
couleurs
```

### j)

*On peut ôter des composantes d'un vecteur en indiquant entre crochets les indices précédés du signe négatif comme par exemple*

```{r}
mesdonnees[-c(3:5)]
```

### k)

*Finalement, le contenu de votre environnement de travail est affiché à l'aide de la fonction `ls().`*

```{r}
ls()
```

# Ex2

### a)

*Construire un diagramme branche-et-feuilles, un histogramme et une boîte à moustaches des données observées à l'aide des commandes ci-dessous.*

```{r}
stem(cpus)
par(mfrow=c(1,2), pty="s")
hist(cpus, xlab="performance relative", ylab="fréquence", main="", 
     col="darkslategray4") 
boxplot(cpus, xlab="performance relative", col="darkslategray4", horizontal=T)
rug(cpus)
par(mfrow=c(1,1))
```

1.  *Quels sont les effets de cette commande ?*

La fonction `par(mfrow=c(1,2)`, `pty="s")` permet de de séparer la zone graphique en plusieurs partie afin de permettre à plusieur graphique de se la partager. `mfrow` donne le format que les lignes aurons ici on donne `c(1,2)` comme valeur à ce paramètre on va donc disposer les graphiques en 1 ligne et 2 colonnes. `pty` permet de lui donner la valeur `"s"` qui indique que l'on veut donner des zones de dessin carrée.

2.  *Quel est l'effet de la fonction `rug()` ?*

La fonction `rug(cpus)` rajoute les traits sur l'axe des données dans le graphique de la boite à moustache.

### b)

*Commenter la distribution des valeurs observées en se basant sur les graphiques de la @fig-hist-boxplot-cpus : valeur(s) atypique(s), asymétrie.*

On peut voir que l'on a une distribution qui est très à gauche. Presque toutes les valeurs se trouvent entre 0 et 200 de performance relatives, et plus particulièrement entre 0 et 100 où il y a une fréquence de 40 contre 8 entre 100 et 200. Il y a 3 valeurs atypiques vers 380, 500 et 980.

### c)

*Calculer la performance relative médiane et la performance relative moyenne des valeurs observées en utilisant les fonctions de R adéquates.*

```{r}
meanCpus <- mean(cpus)
medianCpus <- median(cpus)

meanCpus
medianCpus
```

*Est-il plus approprié d'utiliser la médiane ou la moyenne ?*

On peut voir que la moyenne equivaut à plus du double de la médiane. Cela peut s'expliquer par le fait que la moyenne est beaucoup plus influencée par les valeurs atypiques et donc il serait plus convenable dans ce cas d'utiliser la médiane.

### d)

*Déterminer le(s) mode(s) des valeurs observées à l'aide des commandes suivantes :*

```{r}
n.cpus<-table(cpus)
as.numeric(names(n.cpus)[n.cpus==max(n.cpus)])
```

Les modes sont ceux affichés par la commande.

### e)

*Que fait la commande suivante ?*

```{r}
summary(cpus)
```

Cette commande permet d'avoir un résumé d'une table en affichant son/sa:

-   Minimum
-   1er quartile
-   Mediane
-   Moyenne
-   3ème quartile
-   Maximum

Cela nous permet, en une commande, d'avoir un assez bon apercu d'une table entière.

### f)

*En effectuant aucun calcul, décrire l'effet sur la moyenne et sur la médiane des trois interventions suivantes :*

1.  *ajouter un processeur de performance relative* $43$;

Rajouter ce processeur de performance relative 43 ne changera rien a la médiane ou à la moyenne car ce n'est pas une valeur extrême.

2.  *soustraire* $9$ à chaque valeur observée;

La moyenne ne sera que peu impactée par cette soustraction mais la médiane sera baissée de 9 comme les observations car elle suit la valeur de toutes les valeurs et la moyenne sera toujours influencée par les valeurs extrêmes.

3.  *diviser chaque observation par* $3$.

La division impactera autant la moyenne que la médiane (elle seront divisé les deux par 3).

### g)

*Calculer l'écart-type des performances relatives une fois avec les valeurs atypiques et une fois sans en utilisant la fonction `sd()`. Les valeurs atypiques peuvent être déterminées à l'aide de la fonction `boxplot()` avec `plot=FALSE` comme argument.*

```{r}
boxplot(cpus, xlab="performance relative", col="darkslategray4", horizontal=T, plot=F)
cpus_wout <- cpus[!cpus %in% c(510, 915, 185, 370)]
setdiff(cpus, cpus_wout)
sd(cpus)
sd(cpus_wout)
```

*Que constate-t-on ? L'écart-type est-il un indicateur robuste ?*

On peut trouver les valeurs extrêmes avec la partie **\$out** du `boxplot(plot = F)` (donc ici 510, 915, 185 et 370). On crée donc un nouveau vecteur **cpus_wout** qui sera un nouveau vector sans les valeurs extrêmes. On peut d'ailleurs vérifier que la création se soit bien faite avec la fonction `setdiff()`qui retourne la différence entre 2 vecteurs. On voit ensuite avec `sd()`que l'écart-type est très influencé par ces valeurs car il passe de 148.4294 à 38.5864 une fois retirées. Il n'est donc pas robuste.

# Ex3

```{r}
library(tidyverse)
```

### a)

*Tracer les boîtes à moustaches en parallèle en utilisant les commandes suivantes :*

```{r}
lblue<-"#528B8B"
par(pty="s")
boxplot(note~groupe, data=examen, ylim=c(1,6), xlab="groupe", 
        varwidth=T, col=lblue, main="examen")
abline(h=4, lty=2)
```

### b)

*Rajouter les bâtonnets des notes des étudiants des deux classes, sur le côté gauche des boîtes à moustaches pour la classe* $A$ (`side=2` comme argument de la fonction `rug()`) et sur le côté droite pour la classe $B$ (`side=4` comme argument de la fonction `rug()`).

```{r}
lblue<-"#528B8B"
par(pty="s")
note.A<-split(examen$note, examen$groupe)$A
note.B<-split(examen$note, examen$groupe)$B
boxplot(note~groupe, data=examen, ylim=c(1,6), xlab="groupe", 
        varwidth=T, col=lblue, main="examen")
rug(note.A, side=2)
rug(note.B, side=4)
abline(h=4, lty=2)
```

### c)

*En se basant sur la @fig-boites-moustaches-parallele, existe-t-il une différence significative entre les deux groupes à l'examen de fin d'unité ?*

La majorité des notes du groupe B sont supérieur à celle du groupe A. On le remarque car la boite du groupe B se situe au dessus du groupe A.

### d)

*Observe-t-on sur les boîtes à moustaches une différence entre les dispersions des deux groupes ?*

Non les deux groupes ont une dispersion similaire car leurs moustaches et la boite sont de taille proche.

### e)

*Calculer les écarts-types des deux groupes à l'aide des fonctions `by()` et `sd()`.*

```{r}
by(examen$note, list(examen$groupe), sd)
```

*En se basant sur les écarts-types, existe-t-il une différence en dispersion entre les deux groupes à l'examen de fin d'unité ?*

La différence entre les deux ecart-types est minime seulement env. 0.09 de différence.

### f)

*Que peut-on déduire en comparant les conclusions établies en c), d) et e) ?*

On peut donc en déduire que la seule différence entre les deux groupes est que le groupe B a de meilleurs notes que le groupe A mais qu'en regardant l'ecart-type on peut en déduire que l'examen devait être équitable.

### g)

*Un autre graphique pour étudier les éventuelles différences entre les deux groupes à l'examen de fin d'unité se trouve dans la @fig-densite.*

```{r}
#| label: fig-densite
#| fig-cap: Diagramme de densité en parallèle.
#| fig.show: asis
#| warning: false
#| echo: false
library(tidyverse)
library(showtext)
## Loading Google fonts (https://fonts.google.com/)
font_add_google("Schoolbell", "bell")
showtext_auto()

df_notes_stats <- examen %>% 
  filter(!is.na(note)) %>% 
  group_by(groupe) %>% 
  mutate(
    n = n(),
    median = median(note),
    min = min(note),
    max = max(note)
  ) %>% 
  ungroup() %>% 
  mutate(note_num = as.numeric(fct_rev(groupe))) 

p2 <- 
  ggplot(df_notes_stats, aes(note, note_num, color = groupe)) +
  stat_summary(
    geom = "linerange",
    fun.min = function(x) -Inf,
    fun.max = function(x) median(x, na.rm = TRUE),
    linetype = "dotted",
    orientation = "y",
    linewidth = .7
  ) +
  geom_point(
    aes(y = note_num - .15), 
    shape = "|",
    size = 5,
    alpha = .33
  ) +
  ggdist::stat_halfeye(
    aes(
      y = note_num,
      color = groupe,
      fill = after_scale(colorspace::lighten(color, .5))
    ),
    shape = 18,
    point_size = 3,
    interval_size = 1.8,
    adjust = .5,
    .width = c(0, 1)
  ) +
  geom_text(
    aes(x = median, label = format(round(median, 2), nsmall = 2)),
    stat = "unique",
    color = "white",
    family = "bell",
    fontface = "bold",
    size = 3.4,
    nudge_y = .15
  ) +
  geom_text(
    aes(x = max, label = glue::glue("n = {n}")),
    stat = "unique",
    family = "bell",
    fontface = "bold",
    size = 3.5,
    hjust = 0,
    nudge_x = .01,
    nudge_y = .02
  ) +
  coord_cartesian(clip = "off", expand = FALSE) +
  scale_x_continuous(
    limits = c(1, 6),
    breaks = seq(1, 6, by = .5)
  ) +
  scale_y_continuous(
    limits = c(.55, NA),
    breaks = 1:2,
    labels = c("groupe B", "groupe A")
  ) +
  scale_color_manual(values = c("#3d6721", "#a86826"), guide = "none") +
  scale_fill_manual(values = c("#3d6721", "#a86826"), guide = "none") +
  labs(
    x = "note",
    y = NULL,
    subtitle = "Notes à l'examen de fin d'unité",
    caption = "Données: HEIG-VD"
  ) +
  theme_bw()
print(p2)
```

*À votre avis, entre les boîtes à moustaches en parallèle et le graphique tracé ci-dessus, lequel est le plus approprié ?*

Les boîtes à moustaches permettent de mieux voir l'écart type et fais ressortir mieux les valeurs représentatives des deux groupes. Je pense donc que la boîte à moustache serait plus représentative.

# Ex4

### a)

```{r}
library(ggplot2)
library(arules)

data("AdultUCI")
dframe<-AdultUCI[, c("education", "hours-per-week")]
colnames(dframe)<-c("education", "hours_per_week")
str(dframe)
```

1.  *Pourquoi ce changement de nom de variable ?*  

On remet les valeurs de **AdultUCI** dans **dframe** pour ne récupérer que 2 colonnes qui nous intéresent.

```{r}
ggplot(dframe, aes(x=hours_per_week, y=education)) + 
  geom_point(colour="lightblue", alpha=0.1, position="jitter") + 
  geom_boxplot(outlier.size=0, alpha=0.2)
```

*Commenter le graphique obtenu.*

On voit qu'il y a une sorte de tendance à l'augmentation du nombres d'heures par semaine plus le niveau d'éducation est élevé. La médiane est pareil dans la plupart des boites.

### b)

*Calculer la proportion d'observations contenant des valeurs manquantes en utilisant les commandes ci-dessous.*

```{r}
dim(AdultUCI)
nrows<-nrow(AdultUCI)
n.missing<-rowSums(is.na(AdultUCI))
sum(n.missing>0)/nrows
```

### c)

*En se basant sur les boîtes à moustaches en parallèle de la @fig-recensement, pour quel type de formation observe-t-on la plus grande dispersion du temps de travail ? Existe-t-il une différence entre les médianes des types de formation ? En donner brièvement la raison.*

On observe une grande répartition du nombre d'heures par semaine dans les niveaux d'éducation: **11th**, **12th**, **Prof-school**, **Doctorate**. Mais les médianes sont toutes très proches. Il ya donc, en général, peu de différence entre les niveaux d'éducation car ils tendent tous vers env. 37h qui devait être le nombre d'heures standard en amérique.

### d)

*Pour chaque type de formation, on peut déterminer puis afficher à l'écran le temps maximal de travail hebdomadaire à l'aide des commandes*

```{r}
nx<-by(dframe$hours_per_week, dframe$education, max, na.rm=T)
nx
```

*La formation pour laquelle un temps maximal a été observé se détermine par les commandes*

```{r}
max(nx)
names(nx)[nx==max(nx)]
```

*Est-ce surprenant ?*

Oui mais en y réfléchissant on pourrait se demander si ces valeurs sont vraiment pertinentes étant donné que presque tous les niveaux d'éducation ont atteint 99h et si il n'y aurait pas des valeurs érronées.

### e)

*En s'inspirant des commandes utilisées ci-dessus, déterminer la formation pour laquelle la distribution des temps de travail se caractérise par le plus petit écart-type.*

```{r}
nsd<-by(dframe$hours_per_week, dframe$education, sd, na.rm=T)
names(nsd)[nsd==min(nsd)]
```

### f)

*Observe-t-on un résultat similaire en utilisant l'étendue interquartiles à l'aide de la fonction `IQR()`?*

```{r}
niqr<-by(dframe$hours_per_week, dframe$education, IQR, na.rm=T)
names(niqr)[niqr==min(niqr)]
```

Non nous trouvons **5th-6th**.

# Ex5

*Estimer et justifier les valeurs des coefficients de corrélation des séries de données à l'aide de leurs graphiques de nuage de points tracés dans la @fig-scatterplot1, la @fig-scatterplot2, la @fig-scatterplot3 et la @fig-scatterplot4.*

1.  Dans le graphe I (Figure 6) le coefficient de corrélation est proche de 1 env entre 0.7 et 1 car on voit bien relation linéaire qui relie ces deux variables. On voit aussi que la relation est positive.
2.  Dans le graphe II (Figure 7) le coefficient sera proche de 0 car le nuage de points ne dessine aucune relation reconnaissable.
3.  Dans le graphe III (Figure 8) le coefficient est à 0 car ce n'est pas une relation linéaire.
4.  Dans e graphe IV (Figure 9) le coefficient sera proche de -1 car la relation est negative et il se situera entre -0.7 et -1.

# Ex6

### a)

*Tracer le nuage de points de la largeur (`Petal.Width`) versus la longueur (`Petal.Length`) des pétales des iris en utilisant les librairies `ggplot2` et `ggforce`.*

```{r}
pCol <- c('#057076', '#ff8301', '#bf5ccb')

plot.iris<-ggplot(iris, aes(x=Petal.Length, y=Petal.Width, col=Species)) +
scale_color_manual(values=pCol) +
scale_x_continuous(breaks=seq(0.5, 7.5, by=1), limits=c(0.5, 7.5)) +
scale_y_continuous(breaks=seq(-0.5, 3, by=0.5), limits=c(-0.5, 3)) + 
labs(title="Edgar Anderson's Iris Data",
x="Petal Length", 
y="Petal Width") +
theme(plot.title=element_text(size=12, hjust=.5),
axis.title=element_text(size=10, vjust=-2),
axis.text=element_text(size=10, vjust=-2)) +
geom_point(aes(color=Species), alpha=.6, size=3) +
theme_minimal()

plot.iris +
ggforce::geom_mark_ellipse(
    aes(fill=Species, label=Species), 
    alpha=.15, show.legend=FALSE
) 
```

### b)

*En se basant sur le graphique de nuage de points, existe-t-il une relation entre la largeur et la longueur des pétales des iris ? Dans l'affirmative, de quelle nature est-elle ?*

Oui on peut voir une relation linéaire positive.

### c)

*Remarque-t-on des observations inhabituelles dans le graphique de nuage de points ?*

Non. Il y a plus de répartition pour **virginica** mais toutes les valeurs suivent la même tendance (linéaire).

### d)

*Déterminer la corrélation entre la largeur et la longueur des pétales des iris en utilisant la fonction `cor()`.*

```{r}
cor(iris$Petal.Length, iris$Petal.Width)
```

### e)

*Quelle valeur attribueriez-vous à la longueur des pétales des iris pour distinguer les iris Setosa des deux autres espèces ?*

On peut assez facilement utiliser la valeur 2.5 pour dire que tout iris avec une longueur de pétales plus petite que 2.5 est de l'espèce **setosa**.

### f)

*Des animations peuvent être créées dans R en utilisant la librairie `gganimate`. Un exemple peut être conçu en utilisant le code ci-dessous.*

```{r}
library(gganimate)

anim<-plot.iris+ 
  transition_states(Species,
                    transition_length = 2,
                    state_length = 1)

anim

anim + 
  enter_fade() + 
  exit_shrink() + 
  ggtitle('Now showing {closest_state}',
        subtitle = 'Frame {frame} of {nframes}')
```

# Conclusion

Durant le Tp nous avons appris les bases de R. Donc comment manipuler des objets dans un projet R avec `mean(), max(), min(), ...`. Et aussi des fonctions plus générales comme `by(), cor(), rug()`. Il nous a permit également de nous familiariser avec quelques concepts comme l'écart-type ou le coefficient de corrélation et de nous habituer a analyser "a la volée" un graphique juste en le regardant.
