---
title: "Analyse exploratoire des données"
subtitle: "De la théorie à la pratique (TP 1)"
author:
  - name: Jacques Zuber
    email: jacques.zuber@heig-vd.ch
    affiliations:
      - name: Département TIC
highlight-style: github
format:
  html:
    theme: cosmo
    monobackgroundcolor: rgb(255,250,240)
    toc: true
    toc-location: left
    #reference-location: margin
    reference-location: document
    code-line-numbers: true
date: 'last-modified'
date-format: '[This version:] MMMM D, YYYY'
number-sections: false
editor: 
  visual
---

```{r knitr_init}
#| echo: false
#| cache: false
#| message: false
#| warning: false
## Global options
library(knitr)
opts_chunk$set(echo=TRUE,
               cache=TRUE,
               comment=NA,
               message=FALSE,
               warning=FALSE,
               eval=TRUE)
```

# Préambule

::: {layout="[90, 10]"}
Le logiciel de statistique qui sera utilisé dans les travaux pratiques est ***R***, logiciel libre distribué sous les termes de la *GNU, General Public Licence*, au site web du [***CRAN***](http://www.r-project.org "CRAN") (*Comprehensive R Archive Network*).

![***R***.](Rlogo.png){width="10%"}
:::

Ce logiciel est disponible pour les systèmes d'exploitation Linux, Windows et Mac OS X. Des exécutables précompilés de la version actuelle ***R-4.3.1*** (Beagle Scouts) sont disponibles sur l'un des miroirs du CRAN. Les instructions à suivre pour les installer s'y trouvent.

Pour faciliter votre apprentissage du logiciel, Emmanuel Paradis et Julien Barnier ont écrit de bonnes documentations françaises pour ***R***, "***R*** pour les débutants" et "Introduction à ***R***", qui se trouvent dans la page [Moodle du cours](https://cyberlearn.hes-so.ch/course/view.php?id=12354 "Moodle").

Le logiciel de statistique ***R*** fonctionne principalement par commandes. L'attente de commandes, par défaut le symbole `>`, apparaît au démarrage du logiciel et indique que ***R*** est prêt à exécuter les commandes. Sous Windows, en utilisant l'interface ***R-GUI*** de ***R***, certaines d'entre elles (par exemple accès à l'aide et ouverture de fichiers) peuvent être exécutées par les menus.

Le logiciel ***R***, créé vers 1994 par Ross Ihaka et Robert Gentleman de l'Université d'Auckland, est davantage qu'un simple logiciel de statistique. Il s'agit non seulement d'un outil d'analyse statistique et graphique mais aussi d'un langage reposant sur le langage ***S*** créé par AT & T Bell Laboratories. John M. Chambers, l'un des créateurs de ***S***, a reçu en 1998 le *Software System Award* de la prestigieuse ACM ("Association for Computing Machinery").

![Tiré du "New York Times" du 6 janvier 2009.](createurs.png){width="100%"}

Les possibilités offertes par ***R*** sont vastes et permettent à l'utilisateur d'effectuer des analyses de données très pointues. Le logiciel est reconnu pour sa flexibilité. En effet, les résultats d'une analyse sont stockés dans un "objet"; il est alors possible de n'afficher que la partie des résultats qui intéresse l'utilisateur. Cette facilité n'est pas offerte par la plupart des logiciels classiques. Notons que toutes les actions de ***R*** sont effectuées sur les objets présents dans la mémoire vive de l'ordinateur. Aucun fichier temporaire n'est utilisé. Pour mieux comprendre le fonctionnement de ***R***, il est fortement recommandé de lire le chapitre 2 de l'aide d'Emmanuel Paradis (2005).

Le logiciel de statistique ***R*** nécessite un apprentissage qui peut paraître pénible et difficile en raison du recours aux commandes plutôt qu'aux menus déroulants.

![Dessin de Allison Horst.](we_believe.png){width="100%"}

Rassurez-vous, après s'être rapidement familiarisé avec quelques notions et concepts de base, l'utilisateur pourra employer efficacement le logiciel dont le fonctionnement reste finalement très intuitif. De plus, les commandes vous offrent un horizon de possibilités bien plus large que celui des menus déroulants. Un aide-mémoire des principales commandes de ***R*** figure dans le fichier "aide_memoire.pdf" qui se trouve dans la page [Moodle du cours](https://cyberlearn.hes-so.ch/course/view.php?id=12354 "Moodle").

Une aide en ligne existe directement dans ***R***. Elle est très utile pour connaître l'utilisation des fonctions du logiciel. Plusieurs méthodes existent pour y accéder : la première en utilisant la commande

```{r}
#| eval: false
#| label: help-mean
help("mean")
```

Une deuxième possibilité consiste à utiliser l'alias de la commande `help()`, un point d'interrogation, `?mean`, et finalement, une dernière variante revient à utiliser simplement le menu de l'interface ***R-GUI*** de ***R***.

Un moteur de recherche pratique pour obtenir une aide supplémentaire et complète sur ***R***, ses fonctions, ses librairies complémentaires et la programmation dans ***R*** est [***Rseek.org***](http://www.rseek.org "Rseek"). L'utilisation de ***R*** peut aussi être facilitée en utilisant le [***Quick--R***](http://www.statmethods.net/ "Quick-R").

Pour les utilisateurs de Linux, Windows et Mac OS X, il existe un éditeur, ***RStudio IDE*** (*Integrated Development Environment*), encore plus convivial que celui que vous propose ***R*** par défaut. Il vous permet d'écrire et conserver des scripts dans lesquels figure une suite de commandes qui seront exécutées successivement. Vous pourrez lancer les scripts directement depuis l'éditeur sans avoir besoin de procéder à un "copier-coller". Les scripts de commandes peuvent être archivés et accessibles à tout moment. Il est également possible d'afficher simultanément plusieurs fichiers contenant différents scripts et passer aisément de l'un à l'autre. La possibilité d'écrire des scripts, de les archiver, de les exécuter plusieurs fois en des temps différents est indéniablement un avantage par rapport à ce que vous proposent les logiciels à menus déroulants.

[***RStudio***](https://posit.co/download/rstudio-desktop/ "RStudio") [^1] vaut la peine d'être installé pour ses nombreux avantages.

[^1]: ***RStudio***; la société qui développe l'interface s'appelle [***Posit***](https://www.rstudio.com/blog/rstudio-is-becoming-posit/ "Posit") depuis novembre 2022.

::: {layout="[85, 15]"}
Il est aussi possible d'écrire de manière simple ses propres fonctions. Sans entrer dans les détails, une fonction ***R*** est écrite dans un fichier sauvé au format ASCII avec extension **.R**. Comme les autres langages, ***R*** possède des structures de contrôle qui ne sont pas sans rappeler celles du langage ***C***.

![](Rtruth.png){width="15%"}
:::

Lorsque vous terminez votre session ***R***, n'oubliez pas d'en sauver une image. Elle vous permettra de conserver les objets et de récupérer les dernières commandes utilisées. Dans l'interface ***R-GUI*** de ***R***, d'autres options très pratiques vous sont offertes comme par exemple charger et sauver l'environnement de travail (utile si vous travaillez sur plusieurs projets distincts), charger et sauver l'historique des commandes.

L'étudiant *doit rendre un rapport* du travail pratique dans lequel figurent les réponses aux questions posées ainsi que les graphiques tracés. Il devra le rendre individuellement dans la page [Moodle du cours](https://cyberlearn.hes-so.ch/course/view.php?id=12354 "Moodle") avant la date butoir. Le rapport comptera le ***20 %*** du premier travail écrit. L'étudiant sera aussi interrogé sur les travaux pratiques aux travaux écrits.

Les rapports doivent être rédigés à l'aide de [***quarto®***](https://quarto.org/ "quarto®"), système calligraphique libre conçu notamment pour écrire des documents scientifiques. Il se base sur [***Pandoc***](https://pandoc.org/ "Pandoc"), logiciel libre permettant la conversion de documents en ligne de commande.

Le fonctionnement de ***quarto®*** pour créer un document est résumé dans la figure ci-dessous.

![Source : quarto®.](rstudio-qmd-how-it-works.png){width="100%"}

Sans entrer dans les détails, quarto®[^2] permet de générer des documents de manière dynamique en mélangeant texte et résultats obtenus à l'aide du code ***R***. Les documents créés peuvent être notamment au format HTML, PDF, Word. Ainsi, quarto® est un outil très pratique pour exporter, communiquer et diffuser des résultats d'analyses statistiques. La librairie sous-jacente et fort élégante de ***R*** pour compiler, ou plutôt "tricoter" (*knit* en anglais), un document quarto® (.qmd) afin de visualiser le document généré est `knitr`. Elle crée entre autres un fichier .html dans lequel sont insérés les commandes, les sorties ainsi que les graphiques tracés. Vous avez entre vos mains ou à l'écran un document confectionné à l'aide de `knitr` [^3].

[^2]: Mickaël Canouil a réuni de nombreuses contributions, notamment des modèles, à l'adresse [*quarto*](https://github.com/mcanouil/awesome-quarto "quarto"). Elles nous permettent de se familiariser avec le système calligraphique.

[^3]: Des tutoriaux, démonstrations et exemples se trouvent à l'adresse [*knitr*](http://yihui.name/knitr "knitr").

La librairie `knitr` exécute les morceaux de code de ***R*** contenus dans le document quarto® que vous avez écrit et crée un document ***markdown*** (.md) qui contient le code et sa sortie. Brièvement, ***Markdown*** est un langage de balisage très commode. Pandoc se charge ensuite de transformer le fichier *markdown* en un document de format désiré, comme par exemple en format .html, .pdf et Microsoft® Word.

L'objectif de ce travail pratique consiste à se familiariser avec les commandes de base du logiciel ***R***, à utiliser les techniques d'analyse pour une variable statistique puis deux et finalement à apprendre à rédiger des rapports d'analyse de données.

En route !

# Exercice 1

L'une des forces de ***R*** est qu'il est capable de traiter de grands jeux de données de manière très rapide. Cet avantage a évidemment son prix : la lecture des données peut paraître ennuyeuse, particulièrement lorsqu'elles se trouvent sur support informatique. Il existe cependant plusieurs possibilités pour lire dans ***R*** des données contenues dans un fichier. Si elles se présentent sous la forme d'une liste de valeurs telles que chacune d'elles figure sur une ligne ou si elles sont séparées par un espace, on peut utiliser la commande `scan()` qui renvoie un vecteur. Lorsque les données se présentent sous la forme d'une table, i.e. une ligne par observation et une colonne par variable, l'instruction à utiliser est `read.table()` si les données se trouvent dans un fichier texte (ASCII). Des variantes de cette fonction existent comme par exemple `read.csv2()` [^4]. Dans cet exercice, nous allons enregistrer dans ***R*** les données qui seront utilisées dans le travail pratique. Vous pouvez organiser comme vous le souhaitez votre travail. Néanmoins, nous vous suggérons de créer deux répertoires : l'un contenant les données et l'autre votre travail (script, rapport, résultats). Pour être plus structuré, vous pouvez même ajouter un sous-répertoire à votre répertoire de travail pour y stocker vos graphiques; vous pouvez également créer un projet pour mieux gérer votre travail pratique.

[^4]: Pour de plus amples informations, voir "***R*** pour les débutants", E. Paradis, 2005, pages 12--16.

**a.** Les données que nous allons traiter dans ce travail pratique se trouvent dans la page [Moodle du cours](https://cyberlearn.hes-so.ch/course/view.php?id=12354 "Moodle"). Copiez-les dans votre répertoire de données.

**b.** Charger les données dans ***R*** en utilisant les fonctions `scan()` et `read.table()`.

```{r}
#| warning: false
#| results: hide
dataDir<-"./data"
data_files<-list.files(path=dataDir, pattern = ".txt")
print(data_files)
cpus<-scan(file.path(dataDir, "cpus.txt"))
examen<-read.table(file.path(dataDir, "examen.txt"), header=T)
```

Les utilisateurs se chargeront d'adapter les chemins à leur répertoire de travail et à leur système d'exploitation. Les fichiers `cpus.txt` et `examen.txt` sont ainsi accessibles dans ***R*** sous les noms `cpus` et `examen` respectivement.

**c.** Pour voir le contenu de l'objet `cpus`, taper l'instruction

```{r}
cpus
```

Il en est de même pour `examen`. Les objets `cpus` et `examen` sont de nature toute différente. En effet, le premier est un *vecteur*, le second un tableau de données, *data.frame*[^5] en anglais.

[^5]: Pour de plus amples informations, voir "***R*** pour les débutants", E. Paradis, 2005, pages 12.

**d.** Pour accéder à la 12ème composante du vecteur `cpus`, utiliser la commande

```{r}
cpus[12]
```

**e.** Pour obtenir une partie du vecteur `cpus` comme par exemple les éléments du vecteur compris entre la 3ème et la 19ème composante, taper l'instruction

```{r}
cpus[3:19]
```

**f.** Pour extraire du vecteur `cpus` ses éléments supérieurs à $190$, utiliser la commande

```{r}
cpus[cpus>190]
```

**g.** Il est possible d'accéder directement aux composantes d'une table par le nom. Par exemple, si on veut afficher la composante `note` de l'objet `examen`, on peut utiliser la commande

```{r}
examen$note
```

**h.** On peut aussi accéder en profondeur aux composantes comme par exemple par la commande

```{r}
examen$note[7]
```

**i.** La méthode la plus simple pour créer un vecteur consiste à énumérer ses éléments à l'aide de la fonction `c()` :

```{r}
mesdonnees<-c(2.9, 3.4, 3.4, 3.7, 3.7, 2.8, 2.1, 2.5, 2.6)
mesdonnees
couleurs<-c("bleu", "vert", "blanc", "noir", "jaune")
couleurs
```

**j.** On peut ôter des composantes d'un vecteur en indiquant entre crochets les indices précédés du signe négatif comme par exemple

```{r}
mesdonnees[-c(3:5)]
```

**k.** Finalement, le contenu de votre environnement de travail est affiché à l'aide de la fonction `ls().`

# Exercice 2

La performance relative au processeur *IBM 370/158-3* de $50$ processeurs d'ordinateurs a été relevée.

<br>

$$
\begin{array}{cccccccccc}
46  & 110 & 38  & 22  & 11 & 510 & 38  & 76  & 21  & 92 \\[1mm]
44  & 66  & 24  & 10  & 25 & 915 & 26  & 56  & 40  & 7 \\[1mm]
185 & 141 & 14  & 24  & 19 & 24  & 32  & 33  & 370 & 58 \\[1mm]
12  & 66  & 62  & 12  & 45 & 133 & 64  & 144 & 36  & 130 \\[1mm]
16  & 36  & 65  & 136 & 60 & 18  & 66  & 30  & 100 & 36\\[1mm]
\end{array}
$$\

L'objet `cpus` contient les valeurs observées.

**a.** Construire un diagramme branche-et-feuilles, un histogramme et une boîte à moustaches des données observées à l'aide des commandes ci-dessous.

```{r}
#| label: fig-hist-boxplot-cpus
#| fig-cap: Histogramme et boîte à moustaches
#| warning: false
#| fig.show: asis
par(mfrow=c(1,2), pty="s") # <1>
hist(cpus, xlab="performance relative", ylab="fréquence", main="", 
     col="darkslategray4") 
boxplot(cpus, xlab="performance relative", col="darkslategray4", horizontal=T)
rug(cpus) # <2>
par(mfrow=c(1,1))
```

1.  Quels sont les effets de cette commande ?
2.  Quel est l'effet de la fonction `rug()` ?

Observer les résultats obtenus par chaque commande.

**b.** Commenter la distribution des valeurs observées en se basant sur les graphiques de la @fig-hist-boxplot-cpus : valeur(s) atypique(s), asymétrie.

**c.** Calculer la performance relative médiane et la performance relative moyenne des valeurs observées en utilisant les fonctions de ***R*** adéquates.

Est-il plus approprié d'utiliser la médiane ou la moyenne ?

**d.** Déterminer le(s) mode(s) des valeurs observées à l'aide des commandes suivantes :

```{r}
#| warning: false
#| results: hide
n.cpus<-table(cpus)
as.numeric(names(n.cpus)[n.cpus==max(n.cpus)])
```

**e.** Que fait la commande suivante ?

```{r}
#| warning: false
#| results: hide
summary(cpus)
```

**f.** En effectuant aucun calcul, décrire l'effet sur la moyenne et sur la médiane des trois interventions suivantes :

1.  ajouter un processeur de performance relative $43$;

2.  soustraire $9$ à chaque valeur observée;

3.  diviser chaque observation par $3$.

**g.** Calculer l'écart-type des performances relatives une fois avec les valeurs atypiques et une fois sans en utilisant la fonction `sd()`. Les valeurs atypiques peuvent être déterminées à l'aide de la fonction `boxplot()` avec `plot=FALSE` comme argument.

Que constate-t-on ? L'écart-type est-il un indicateur robuste ?

# Exercice 3

Les étudiants suivant un cours de Probabilités et Statistique dans une école d'ingénierie ont passé l'examen de fin d'unité. Le cours était donné par le même professeur à $32$ étudiants répartis en deux groupes notés *A* et *B*. Les résultats obtenus figurent dans la table ci-dessous et sont contenus dans l'objet `examen`.

```{r}
#| echo: false
#| results: hide
#| message: false
#| warning: false
library(tidyverse)
library(gt)
library(gtExtras)
```

```{r}
#| label: tableau-notes
#| tbl-cap: Notes obtenues par les étudiants à l'examen de fin d'unité du cours de Probabilités et Statistique.
#| echo: false
#| warning: false
library(wesanderson)

examen %>%
  gt() %>% 
  #data_color() %>%
  data_color(columns=note, palette="wesanderson::Zissou1") %>%
  gt_theme_guardian() %>%
  #gt_theme_538() %>% 
  #gt_theme_dot_matrix(color = "red") %>%
  tab_header(title = "Table des notes selon les groupes")
```

On se demande si une différence significative existe entre les deux groupes à l'examen.

**a.** Tracer les boîtes à moustaches en parallèle en utilisant les commandes suivantes :

```{r}
#| label: fig-boites-moustaches-parallele
#| fig-cap: Boîtes à moustaches en parallèle.
#| warning: false
lblue<-"#528B8B"
par(pty="s")
boxplot(note~groupe, data=examen, ylim=c(1,6), xlab="groupe", 
        varwidth=T, col=lblue, main="examen")
abline(h=4, lty=2)
```

**b.** Rajouter les bâtonnets des notes des étudiants des deux classes, sur le côté gauche des boîtes à moustaches pour la classe $A$ (`side=2` comme argument de la fonction `rug()`) et sur le côté droite pour la classe $B$ (`side=4` comme argument de la fonction `rug()`).

*Indication :* pour séparer puis enregistrer les notes des étudiants selon les groupes, on peut utiliser les commandes

```{r}
note.A<-split(examen$note, examen$groupe)$A
note.B<-split(examen$note, examen$groupe)$B
```

**c.** En se basant sur la @fig-boites-moustaches-parallele, existe-t-il une différence significative entre les deux groupes à l'examen de fin d'unité ?

**d.** Observe-t-on sur les boîtes à moustaches une différence entre les dispersions des deux groupes ?

**e.** Calculer les écarts-types des deux groupes à l'aide des fonctions `by()` et `sd()`.

En se basant sur les écarts-types, existe-t-il une différence en dispersion entre les deux groupes à l'examen de fin d'unité ?

**f.** Que peut-on déduire en comparant les conclusions établies en **c.**, **d.** et **e.** ?

**g.** Un autre graphique pour étudier les éventuelles différences entre les deux groupes à l'examen de fin d'unité se trouve dans la @fig-densite.

<br>

```{r}
#| label: fig-densite
#| fig-cap: Diagramme de densité en parallèle.
#| fig.show: asis
#| warning: false
#| echo: false
library(tidyverse)
library(showtext)
## Loading Google fonts (https://fonts.google.com/)
font_add_google("Schoolbell", "bell")
showtext_auto()

df_notes_stats <- examen %>% 
  filter(!is.na(note)) %>% 
  group_by(groupe) %>% 
  mutate(
    n = n(),
    median = median(note),
    min = min(note),
    max = max(note)
  ) %>% 
  ungroup() %>% 
  mutate(note_num = as.numeric(fct_rev(groupe))) 

p2 <- 
  ggplot(df_notes_stats, aes(note, note_num, color = groupe)) +
  stat_summary(
    geom = "linerange",
    fun.min = function(x) -Inf,
    fun.max = function(x) median(x, na.rm = TRUE),
    linetype = "dotted",
    orientation = "y",
    linewidth = .7
  ) +
  geom_point(
    aes(y = note_num - .15), 
    shape = "|",
    size = 5,
    alpha = .33
  ) +
  ggdist::stat_halfeye(
    aes(
      y = note_num,
      color = groupe,
      fill = after_scale(colorspace::lighten(color, .5))
    ),
    shape = 18,
    point_size = 3,
    interval_size = 1.8,
    adjust = .5,
    .width = c(0, 1)
  ) +
  geom_text(
    aes(x = median, label = format(round(median, 2), nsmall = 2)),
    stat = "unique",
    color = "white",
    family = "bell",
    fontface = "bold",
    size = 3.4,
    nudge_y = .15
  ) +
  geom_text(
    aes(x = max, label = glue::glue("n = {n}")),
    stat = "unique",
    family = "bell",
    fontface = "bold",
    size = 3.5,
    hjust = 0,
    nudge_x = .01,
    nudge_y = .02
  ) +
  coord_cartesian(clip = "off", expand = FALSE) +
  scale_x_continuous(
    limits = c(1, 6),
    breaks = seq(1, 6, by = .5)
  ) +
  scale_y_continuous(
    limits = c(.55, NA),
    breaks = 1:2,
    labels = c("groupe B", "groupe A")
  ) +
  scale_color_manual(values = c("#3d6721", "#a86826"), guide = "none") +
  scale_fill_manual(values = c("#3d6721", "#a86826"), guide = "none") +
  labs(
    x = "note",
    y = NULL,
    subtitle = "Notes à l'examen de fin d'unité",
    caption = "Données: HEIG-VD"
  ) +
  theme_bw()
print(p2)
```

À votre avis, entre les boîtes à moustaches en parallèle et le graphique tracé ci-dessus, lequel est le plus approprié ?

# Exercice 4

Une partie de la base de données du recensement américain[^6] de $1994$ a été extraite. Elle concerne $48'842$ personnes adultes dont on s'intéresse notamment à l'influence que peut avoir le type de scolarité, formation acquise par l'individu, sur le nombre d'heures de travail par semaine. Par simplicité et pour préserver l'authenticité du système éducatif américain, le nom des variables n'est pas traduit en français.

[^6]: Par intérêt, un coup d'oeil à l'adresse du [Gouvernement Américain](https://www.census.gov/ "United States Census Bureau").

**a.** Nous nous proposons de tracer les boîtes à moustaches en parallèle du temps consacré au travail par les individus recensés. Pour y parvenir, nous utilisons la librairie `ggplot2` qu'il faut d'abord installer puis activer dans votre session.

```{r}
#| warning: false
library(ggplot2)
```

La librairie `ggplot2` explicite les liens conceptuels entre graphiques et analyses statistiques. Sa syntaxe est particulière mais ingénieuse. Elle se base sur un ensemble de composants indépendants qui peuvent être combinés de différentes manières[^7].

[^7]: De plus amples informations se trouvent dans [Tidyverse](https://ggplot2.tidyverse.org/ "tidyverse").

Les données du recensement se trouvent dans la librairie `arules` de ***R*** qui doit être installée puis activée.

```{r}
#| warning: false
library(arules)
```

Les observations sont lues dans le logiciel à l'aide de la commande

```{r}
#| label: lecture des donnees
data("AdultUCI")
```

et les variables qui nous intéressent sont sélectionnées et stockées dans l'objet `dframe` par les commandes

```{r}
dframe<-AdultUCI[, c("education", "hours-per-week")]
colnames(dframe)<-c("education", "hours_per_week") # <1> 
str(dframe)
```

1.  Pourquoi ce changement de nom de variable ?

Tracer les boîtes à moustaches en parallèle de la @fig-recensement dans lesquelles est représenté le temps hebdomadaire consacré au travail par les Américains recensés selon leur formation.

```{r}
#| label: fig-recensement
#| fig-cap: Boîtes à moustaches du temps de travail selon la formation.
#| fig.show: asis
ggplot(dframe, aes(x=hours_per_week, y=education)) + 
  geom_point(colour="lightblue", alpha=0.1, position="jitter") + 
  geom_boxplot(outlier.size=0, alpha=0.2)
```

Commenter le graphique obtenu.

**b.** Calculer la proportion d'observations contenant des valeurs manquantes en utilisant les commandes ci-dessous.

```{r}
#| results: hide
dim(AdultUCI)
nrows<-nrow(AdultUCI)
n.missing<-rowSums(is.na(AdultUCI))
sum(n.missing>0)/nrows
```

**c.** En se basant sur les boîtes à moustaches en parallèle de la @fig-recensement, pour quel type de formation observe-t-on la plus grande dispersion du temps de travail ? Existe-t-il une différence entre les médianes des types de formation ? En donner brièvement la raison.

**d.** Pour chaque type de formation, on peut déterminer puis afficher à l'écran le temps maximal de travail hebdomadaire à l'aide des commandes

```{r}
#| results: hide
nx<-by(dframe$hours_per_week, dframe$education, max, na.rm=T)
nx
```

La formation pour laquelle un temps maximal a été observé se détermine par les commandes

```{r}
#| results: hide
max(nx)
names(nx)[nx==max(nx)]
```

Est-ce surprenant ?

**e.** En s'inspirant des commandes utilisées ci-dessus, déterminer la formation pour laquelle la distribution des temps de travail se caractérise par le plus petit écart-type.

**f.** Observe-t-on un résultat similaire en utilisant l'étendue interquartiles à l'aide de la fonction `IQR()`?

![Les délices de la librairie `ggplot2`](ggplot2_exploratory.png){#fig-ggplot2 fig-pos="h" width="80%"}

# Exercice 5

Estimer et justifier les valeurs des coefficients de corrélation des séries de données à l'aide de leurs graphiques de nuage de points tracés dans la @fig-scatterplot1, la @fig-scatterplot2, la @fig-scatterplot3 et la @fig-scatterplot4.

![Graphiques de nuage de points I.](scatterplot5.png){#fig-scatterplot1 fig-align="left" width="80%"}

![Graphiques de nuage de points II.](scatterplot6.png){#fig-scatterplot2 fig-align="left" width="80%"}

![Graphiques de nuage de points III.](scatterplot7.png){#fig-scatterplot3 fig-align="left" width="80%"}

![Graphiques de nuage de points IV.](scatterplot8.png){#fig-scatterplot4 fig-align="left" width="80%"}

# Exercice 6

Une étude a été réalisée en botanique sur $150$ iris. Cinq variables ont été relevées : la longueur (`Sepal.Length`) et la largeur (`Sepal.Width`) des sépales, la longueur (`Petal.Length`) et la largeur (`Petal.Width`) des pétales, l'unité utilisée étant le centimètre, ainsi que l'espèce (`Species`) de la fleur (Setosa, Versicolor et Virginica).

![Les trois espèces d'iris.](iris.png){#fig-iris-species fig-pos="h" width="50%"}

Ces données, qui avaient été récoltées par Edgar Anderson, se trouvent déjà dans ***R***. Pour les utiliser dans votre session actuelle, il suffit de taper dans la console le nom de l'objet, `iris`, qui les contient.

**a.** Tracer le nuage de points de la largeur (`Petal.Width`) versus la longueur (`Petal.Length`) des pétales des iris en utilisant les librairies `ggplot2` et `ggforce`.

```{r}
#| warning: false
#| echo: false
#| message: false
library(ggplot2)
library(ggforce)
```

```{r}
#| label: fig-iris
#| fig-cap: Graphique de nuage de points des iris
#| warning: false
#| message: false

pCol <- c('#057076', '#ff8301', '#bf5ccb')

plot.iris<-ggplot(iris, aes(x=Petal.Length, y=Petal.Width, col=Species)) +
scale_color_manual(values=pCol) +
scale_x_continuous(breaks=seq(0.5, 7.5, by=1), limits=c(0.5, 7.5)) +
scale_y_continuous(breaks=seq(-0.5, 3, by=0.5), limits=c(-0.5, 3)) + 
labs(title="Edgar Anderson's Iris Data",
x="Petal Length", 
y="Petal Width") +
theme(plot.title=element_text(size=12, hjust=.5),
axis.title=element_text(size=10, vjust=-2),
axis.text=element_text(size=10, vjust=-2)) +
geom_point(aes(color=Species), alpha=.6, size=3) +
theme_minimal()

plot.iris +
ggforce::geom_mark_ellipse(
    aes(fill=Species, label=Species), 
    alpha=.15, show.legend=FALSE
) 
```

**b.** En se basant sur le graphique de nuage de points, existe-t-il une relation entre la largeur et la longueur des pétales des iris ? Dans l'affirmative, de quelle nature est-elle ?

**c.** Remarque-t-on des observations inhabituelles dans le graphique de nuage de points ?

**d.** Déterminer la corrélation entre la largeur et la longueur des pétales des iris en utilisant la fonction `cor()`.

**e.** Quelle valeur attribueriez-vous à la longueur des pétales des iris pour distinguer les iris Setosa des deux autres espèces ?

**f.** Des animations peuvent être créées dans ***R*** en utilisant la librairie `gganimate`. Un exemple peut être conçu en utilisant le code ci-dessous.

```{r}
#| eval: false
#| label: fig-iris-animation
#| fig-cap: Graphique de nuage de points anime des iris
#| warning: false
#| message: false

library(gganimate)

anim<-plot.iris+ 
  transition_states(Species,
                    transition_length = 2,
                    state_length = 1)

anim

anim + 
  enter_fade() + 
  exit_shrink() + 
  ggtitle('Now showing {closest_state}',
        subtitle = 'Frame {frame} of {nframes}')
```

**g.** (*En option bonus*) Installer la librairie `reticulate` qui permet de faire du *Python* à partir de ***RStudio IDE***. Fixer ensuite l'interpréteur Python dans la rubrique *Python* de la boîte de dialogue *Options*. Cette boîte de dialogue s'affiche à l'écran en utilisant le menu *Tools* puis *Global Options...* de ***RStudio IDE***.

<br>

![L'interpréteur Python de ***RStudio IDE***.](Python_interpreter.png){width="80%"}

<br>

La lecture de l'objet `iris` de ***R*** en Python s'effectue en utilisant la commande

```{python}
#| message: false
iris_py = r.iris
```

Reconstituer le graphique ci-dessous en utilisant en particulier les librairies `pandas`, `numpy` et le module `matplotlib.pyplot` de la bibliothèque `matplotlib` de Python.

![Graphique de nuage de points des iris](nuage_points_iris.png){#fig-iris-species-python fig-pos="h" width="80%"}

::: callout-note
Le rapport doit :

-   être rédigé avec soin en utilisant ***quarto®***;

-   contenir une introduction dans laquelle se trouve les objectifs de l'analyse de données ainsi qu'une conclusion pour synthétiser le travail pratique;

-   contenir les réponses aux questions posées;

-   contenir les commandes de ***R*** utilisées, les résultats et graphiques obtenus;

-   être rendu sur la page Moodle du cours en format .html ou .pdf avant la date butoir.
:::
